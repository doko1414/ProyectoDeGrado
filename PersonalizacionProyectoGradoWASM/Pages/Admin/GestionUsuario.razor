@page "/usuarios"
@using Microsoft.AspNetCore.Authorization
@using PersonalizacionProyectoGradoWASM.Helpers
@using PersonalizacionProyectoGradoWASM.Servicios
@using PersonalizacionProyectoGradoWASM.Servicios.IServicios
@using PersonalizacionProyectoGradoWASM.Modelos
@inject IUsuariosServicio usuarioServicio
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "0")]

<section class="usuarios-container">
    <div class="filtros-container">
        <input type="text" class="filtro-input" placeholder="Buscar por nombre de usuario" @bind="filtroNombre" @bind:event="oninput" @onkeyup="FiltrarUsuarios" />
        <select class="filtro-select" @bind="filtroRol" @bind:after="FiltrarUsuarios">
            <option value="">Todos los Usuarios</option>
            <option value="@RolEnum.Administrador">Administradores</option>
            <option value="@RolEnum.cliente">Clientes</option>
        </select>
        <button class="btn-nuevo" @onclick="NuevoUsuario">Nuevo Administrador</button>
    </div>

    @if (estaCargando)
    {
        <div class="loading">Cargando...</div>
    }
    else if (error != null)
    {
        <div class="error-message">@error</div>
    }
    else
    {
        <div class="table-container2">
            <table class="usuarios-table">
                <thead>
                    <tr>
                        <th class="col-id">ID</th>
                        <th class="col-usuario">USUARIO</th>
                        <th class="col-nombre">NOMBRE</th>
                        <th class="col-apellidos">APELLIDOS</th>
                        <th class="col-celular">CELULAR</th>
                        <th class="col-direccion">DIRECCIÓN</th>
                        <th class="col-email">E-MAIL</th>
                        <th class="col-acciones">ACCIONES</th>
                    </tr>
                </thead>
                <tbody>
                    @if (usuariosFiltrados != null && usuariosFiltrados.Any())
                    {
                        @foreach (var usuario in usuariosFiltrados)
                        {
                            <tr>
                                <td>@usuario.Id</td>
                                <td>@usuario.NombreUsuario</td>
                                <td>@usuario.Nombre</td>
                                <td>@usuario.Apellido</td>
                                <td>@usuario.NumeroCelular</td>
                                <td>@usuario.Direccion</td>
                                <td>@usuario.Email</td>
                                <td class="acciones-container2">
                                    <button class="btn-editar" @onclick="() => IniciarEdicion(usuario.Id)">Editar</button>
                                    <button class="btn-eliminar" @onclick="() => ManejadorOnBorrar(usuario.Id)">Borrar</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="text-center">No hay usuarios para mostrar.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</section>

@code {
    private List<UsuarioGestion> usuarios = new List<UsuarioGestion>();
    private List<UsuarioGestion> usuariosFiltrados = new List<UsuarioGestion>();
    private bool estaCargando = true;
    private string error;
    private string filtroNombre = "";
    private RolEnum? filtroRol = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        estaCargando = true;
        error = null;
        try
        {
            usuarios = (await usuarioServicio.GetUsuarios()).ToList();
            FiltrarUsuarios();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar usuarios: {ex.Message}";
        }
        finally
        {
            estaCargando = false;
        }
    }

    private void FiltrarUsuarios()
    {
        usuariosFiltrados = usuarios
            .Where(u => string.IsNullOrEmpty(filtroNombre) ||
                        u.NombreUsuario.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase) ||
                        u.Nombre.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase) ||
                        u.Apellido.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase))
            .Where(u => !filtroRol.HasValue || u.Rol == filtroRol.Value)
            .ToList();
    }

    private async Task ManejadorOnBorrar(int userId)
    {
        bool confirmado = await JsRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar este usuario?");
        if (confirmado)
        {
            try
            {
                bool resultado = await usuarioServicio.EliminarUsuario(userId);
                if (resultado)
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Usuario eliminado correctamente");
                    await CargarUsuarios();
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("alert", "No se pudo eliminar el usuario");
                }
            }
            catch (Exception ex)
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Error al eliminar usuario: {ex.Message}");
            }
        }
    }

    private void IniciarEdicion(int userId)
    {
        NavigationManager.NavigateTo($"/editar-usuario/{userId}");
    }

    private void NuevoUsuario()
    {
        NavigationManager.NavigateTo("/registroAdmin");
    }
}