@page "/usuarios"
@using Microsoft.AspNetCore.Authorization
@using PersonalizacionProyectoGradoWASM.Helpers
@using PersonalizacionProyectoGradoWASM.Servicios
@using PersonalizacionProyectoGradoWASM.Servicios.IServicios
@using PersonalizacionProyectoGradoWASM.Modelos
@inject IUsuariosServicio usuarioServicio
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "0")]

<section id="usuarios" class="d-flex justify-content-center" style="min-height: 100vh; padding-top: 80px;">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12">
                <h2 class="text-center mb-4">Usuarios</h2>
                <div class="row mb-3">
                    <div class="col">
                        <button class="btn-nuevo">Nuevo</button>
                    </div>
                    <div class="col-auto">
                        <input type="text" placeholder="Buscar" class="form-field">
                    </div>
                </div>

                @if (estaCargando)
                {
                    <p>Cargando...</p>
                }
                else
                {
                    <div class="table-responsive">
                        <h3>Administradores</h3>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Nombre de Usuario</th>
                                    <th>Nombre</th>
                                    <th>Apellidos</th>
                                    <th>Nro. Celular</th>
                                    <th>Dirección</th>
                                    <th>E-mail</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var admin in Administradores)
                                {
                                    <tr>
                                        <td>@admin.Id</td>
                                        <td>@admin.NombreUsuario</td>
                                        <td>@admin.Nombre</td>
                                        <td>@admin.Apellido</td>
                                        <td>@admin.NumeroCelular</td>
                                        <td>@admin.Direccion</td>
                                        <td>@admin.Email</td>
                                        <td>
                                            <button class="btn btn-editar" @onclick="() => IniciarEdicion(admin.Id)">Editar</button>
                                            <button class="btn btn-danger" @onclick="() => ManejadorOnBorrar(admin.Id)">
                                                <i class="bi bi-trash-fill"></i>&nbsp; Borrar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="table-responsive mt-5">
                        <h3>Clientes</h3>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Nombre de Usuario</th>
                                    <th>Nombre</th>
                                    <th>Apellidos</th>
                                    <th>Nro. Celular</th>
                                    <th>Dirección</th>
                                    <th>E-mail</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var cliente in Clientes)
                                {
                                    <tr>
                                        <td>@cliente.Id</td>
                                        <td>@cliente.NombreUsuario</td>
                                        <td>@cliente.Nombre</td>
                                        <td>@cliente.Apellido</td>
                                        <td>@cliente.NumeroCelular</td>
                                        <td>@cliente.Direccion</td>
                                        <td>@cliente.Email</td>
                                        <td>
                                            <button class="btn btn-danger" @onclick="() => ManejadorOnBorrar(cliente.Id)">
                                                <i class="bi bi-trash-fill"></i>&nbsp; Borrar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private IEnumerable<UsuarioGestion> Usuarios { get; set; } = new List<UsuarioGestion>();
    private IEnumerable<UsuarioGestion> Administradores { get; set; } = new List<UsuarioGestion>();
    private IEnumerable<UsuarioGestion> Clientes { get; set; } = new List<UsuarioGestion>();

    private bool estaCargando = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        estaCargando = true;
        try
        {
            Usuarios = await usuarioServicio.GetUsuarios();
            Administradores = Usuarios.Where(u => u.Rol == RolEnum.Administrador);
            Clientes = Usuarios.Where(u => u.Rol == RolEnum.cliente);
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error al cargar usuarios: {ex.Message}");
        }
        finally
        {
            estaCargando = false;
        }
    }

    private async Task ManejadorOnBorrar(int userId)
    {
        bool confirmado = await JsRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar este usuario?");
        if (confirmado)
        {
            try
            {
                bool resultado = await usuarioServicio.EliminarUsuario(userId);
                if (resultado)
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Usuario eliminado correctamente");
                    await CargarUsuarios();
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("alert", "No se pudo eliminar el usuario");
                }
            }
            catch (Exception ex)
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Error al eliminar usuario: {ex.Message}");
            }
        }
    }

    private void IniciarEdicion(int userId)
    {
        NavigationManager.NavigateTo($"/editar-usuario/{userId}");
    }
}