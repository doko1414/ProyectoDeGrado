@page "/accesorios"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@using PersonalizacionProyectoGradoWASM.Helpers
@using PersonalizacionProyectoGradoWASM.Servicios
@using PersonalizacionProyectoGradoWASM.Servicios.IServicios
@using PersonalizacionProyectoGradoWASM.Modelos
@inject IAccesoriosServicio accesoriosServicio
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "0")]

<section id="accesorios-page" class="accesorios-container">
    <div class="accesorios-header">
        <button @onclick="NuevoAccesorio" class="btn-nuevo">
            <i class="bi bi-plus-circle-fill"></i>Nuevo Accesorio
        </button>
    </div>

    <div class="accesorios-table-container">
        <table class="accesorios-table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Costo</th>
                    <th>Precio</th>
                    <th>Modelo 3D</th>
                    <th>Descripción</th>
                    <th>Creación</th>
                    <th>Actualización</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (Accesorios.Count() > 0)
                {
                    @foreach (var accesorio in Accesorios)
                    {
                        <tr>
                            <td>@accesorio.Id</td>
                            <td>@accesorio.Nombre</td>
                            <td>@accesorio.Costo</td>
                            <td>@accesorio.Precio</td>
                            <td>
                                <button class="btn-modelo3d" @onclick="() => MostrarModelo3D(accesorio.RutaImagen)">Ver Modelo 3D</button>
                            </td>
                            <td>@accesorio.Descripcion</td>
                            <td>@accesorio.FechaCreacion.ToShortDateString()</td>
                            <td>@accesorio.FechaActualizacion.ToShortDateString()</td>
                            <td class="acciones-container3">
                                <button class="btn-editar" @onclick="() => IniciarEdicion(accesorio.Id)"><i class="bi bi-gear-fill"></i>Editar</button>
                                <button class="btn-borrar" @onclick="()=>ManejadorOnBorrar(accesorio.Id)"><i class="bi bi-trash-fill"></i>Borrar</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="9">Cargando...</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <ConfirmacionBorrado ProcesandoComponentePadre="estaProcesando" CambioConfirmacion="Click_Confirmacion_Borrado"></ConfirmacionBorrado>
</section>

<!-- Modal para mostrar el modelo 3D -->
<div class="modal fade" id="modelo3DModal" tabindex="-1" role="dialog" aria-labelledby="modelo3DModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modelo3DModalLabel">Vista previa </h5>
            </div>
            <div class="modal-body">
                <canvas id="renderCanvas" style="width: 100%; height: 400px;"></canvas>
            </div>
        </div>
    </div>
</div>

@code {
    public IEnumerable<Accesorio> Accesorios { get; set; } = new List<Accesorio>();
    //Par la parte de borrar
    private bool estaProcesando { get; set; } = false;
    private int? BorrarIdAccesorio { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        Accesorios = await accesoriosServicio.GetAccesorios();
    }

    public async Task ManejadorOnBorrar(int accesorioId)
    {
        BorrarIdAccesorio = accesorioId;
        await JsRuntime.InvokeVoidAsync("MostrarModalConfirmacionBorrado");
    }

    public async Task Click_Confirmacion_Borrado(bool confirmado)
    {
        if (confirmado && BorrarIdAccesorio.HasValue)
        {
            estaProcesando = true;
            try
            {
                await accesoriosServicio.EliminarAccesorio(BorrarIdAccesorio.Value);
                await JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Accesorio eliminado correctamente");
                Accesorios = await accesoriosServicio.GetAccesorios();
            }
            catch (Exception ex)
            {
                await JsRuntime.InvokeVoidAsync("ShowToastr", "error", "Error al eliminar el accesorio");
            }
            finally
            {
                estaProcesando = false;
                BorrarIdAccesorio = null;
            }
        }
    }
     private async Task MostrarModelo3D(string rutaModelo3D)
    {
        await JsRuntime.InvokeVoidAsync("mostrarModelo3D", rutaModelo3D);
    }
    private void NuevoAccesorio()
    {
        NavigationManager.NavigateTo("crear-accesorio");
    }
    private void IniciarEdicion(int accesorioId)
    {
        NavigationManager.NavigateTo($"editar-accesorio/{accesorioId}");
    }
}
