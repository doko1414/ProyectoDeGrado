@page "/editar-accesorio/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using PersonalizacionProyectoGradoWASM.Helpers
@using PersonalizacionProyectoGradoWASM.Modelos
@using PersonalizacionProyectoGradoWASM.Servicios.IServicios
@using System.Net.Http.Headers
@inject IAccesoriosServicio accesoriosServicio
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "0")]

<section id="editarAccesorios" class="d-flex justify-content-center" style="min-height: 100vh; padding-top: 80px;">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12">
                <h1 class="text-center">Editar Accesorio</h1>

                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <div class="col-7">
                                <h4 class="card-title text-dark">Editar Accesorio</h4>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (EditarAccesorio == null)
                        {
                            <p>Cargando...</p>
                        }
                        else
                        {
                            <EditForm Model="EditarAccesorio" OnValidSubmit="@ManejadorOnEditarAccesorio">
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                                <ValidationSummary></ValidationSummary>
                                <div class="container">
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-2">
                                                <label>Nombre:</label>
                                            </div>
                                            <div class="-col-6">
                                                <InputSelect @bind-Value="EditarAccesorio.Nombre" class="form-control">
                                                    <option value="">Seleccione un nombre</option>
                                                    @foreach (var nombre in listaDeNombres)
                                                    {
                                                        <option value="@nombre">@nombre</option>
                                                    }
                                                </InputSelect>
                                                <ValidationMessage For="() => EditarAccesorio.Nombre"></ValidationMessage>
                                            </div>
                                        </div>
                                    </div>
                                    <br />

                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-2">
                                                <label>Costo:</label>
                                            </div>
                                            <div class="-col-6">
                                                <InputNumber @bind-Value="EditarAccesorio.Costo" class="form-control"></InputNumber>
                                                <ValidationMessage For="() => EditarAccesorio.Costo"></ValidationMessage>
                                            </div>
                                        </div>
                                    </div>
                                    <br />

                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-2">
                                                <label>Precio:</label>
                                            </div>
                                            <div class="-col-6">
                                                <InputNumber @bind-Value="EditarAccesorio.Precio" class="form-control"></InputNumber>
                                                <ValidationMessage For="() => EditarAccesorio.Precio"></ValidationMessage>
                                            </div>
                                        </div>
                                    </div>
                                    <br />

                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-6">
                                                <h4>Modelo 3D del Accesorio</h4>
                                                @if (!string.IsNullOrEmpty(EditarAccesorio.RutaImagen))
                                                {
                                                    <div>
                                                        <p>Modelo 3D actual: @EditarAccesorio.RutaImagen</p>
                                                        <button type="button" class="btn btn-info" @onclick="MostrarVistaPrevia3D">Vista previa 3D</button>
                                                        <button type="button" class="btn btn-danger" @onclick="EliminarModelo3D">Eliminar modelo</button>
                                                    </div>
                                                }
                                                <InputFile OnChange="@ManejadorOnSubidaArchivo" accept=".glb"></InputFile>
                                            </div>
                                        </div>
                                    </div>
                                    <br />

                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-2">
                                                <label>Descripción</label>
                                            </div>
                                            <div class="-col-6">
                                                <InputText @bind-Value="EditarAccesorio.Descripcion" class="form-control"></InputText>
                                                <ValidationMessage For="() => EditarAccesorio.Descripcion"></ValidationMessage>
                                            </div>
                                        </div>
                                    </div>
                                    <br />
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-2">
                                                <button type="submit" class="btn btn-success"><i class="bi bi-gear-fill"></i>&nbsp; Guardar Cambios</button>
                                            </div>
                                            <div class="col-6">
                                                <NavLink href="accesorios" class="btn btn-secondary"><i class="bi bi-arrow-left-circle-fill"></i>&nbsp; Volver atrás</NavLink>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Modal para mostrar el modelo 3D -->
<div class="modal fade" id="modelo3DModal" tabindex="-1" role="dialog" aria-labelledby="modelo3DModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modelo3DModalLabel">Vista previa del Modelo 3D</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <canvas id="renderCanvas" style="width: 100%; height: 400px;"></canvas>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Accesorio EditarAccesorio { get; set; } = new Accesorio();
    public List<string> listaDeNombres { get; set; } = new List<string> { "Bicicleta", "Montura", "Bocina", "Canasta", "Espejos", "Mangos", "Timbre", "Asiento para Niño " };

    protected override async Task OnInitializedAsync()
    {
        EditarAccesorio = await accesoriosServicio.GetAccesorio(Id);
    }

    private async Task ManejadorOnEditarAccesorio()
    {
        try
        {
            var accesorioActualizado = await accesoriosServicio.ActualizarAccesorio(Id, EditarAccesorio);
            await JSRuntime.InvokeVoidAsync("ShowToastr", "success", "Accesorio actualizado correctamente");
            navigationManager.NavigateTo("accesorios");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("ShowToastr", "error", $"Error al actualizar el accesorio: {ex.Message}");
        }
    }

    private async Task ManejadorOnSubidaArchivo(InputFileChangeEventArgs e)
    {
        var modeloFile = e.File;
        if (modeloFile != null)
        {
            if (Path.GetExtension(modeloFile.Name).ToLower() != ".glb")
            {
                await JSRuntime.InvokeVoidAsync("ShowToastr", "error", "Por favor, seleccione un archivo .glb");
                return;
            }

            try
            {
                using (var ms = new MemoryStream())
                {
                    await modeloFile.OpenReadStream().CopyToAsync(ms);
                    ms.Seek(0, SeekOrigin.Begin);

                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms), "file", modeloFile.Name);

                    var rutaImagen = await accesoriosServicio.SubidaImagen(content);
                    EditarAccesorio.RutaImagen = rutaImagen;
                    await JSRuntime.InvokeVoidAsync("ShowToastr", "success", "Modelo 3D cargado correctamente");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("ShowToastr", "error", $"Error al cargar el modelo 3D: {ex.Message}");
            }
        }
    }

    private async Task MostrarVistaPrevia3D()
    {
        await JSRuntime.InvokeVoidAsync("mostrarModelo3D", EditarAccesorio.RutaImagen);
    }

    private void EliminarModelo3D()
    {
        EditarAccesorio.RutaImagen = null;
    }
}